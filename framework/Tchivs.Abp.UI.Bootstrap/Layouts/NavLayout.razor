@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Tchivs.Abp.UI.Toolbars
@using Volo.Abp.Users
@using Volo.Abp.UI.Navigation
@using Volo.Abp.Ui.Branding
@using global::Localization.Resources.AbpUi
@inherits LayoutComponentBase
@inject IOptions<AbpRouterOptions> _routerOptions
@inject IBrandingProvider _brandingProvider
@inject ICurrentUser _user
@inject IMenuManager _menuManager
@inject IToolbarManager _toolbarManager
@inject NavigationManager _navigationManager
@inject IStringLocalizer<AbpUiResource> UiLocalizer
<PageTitle>@_brandingProvider.AppName</PageTitle>
<CascadingValue Value="this" IsFixed="true">
    <Layout SideWidth="0"
            IsPage="true"
            ShowGotoTop="true"
            ShowCollapseBar="true"
            IsFullSide="@IsFullSide"
            IsFixedHeader="@IsFixedHeader"
            IsFixedFooter="@IsFixedFooter"
            ShowFooter="@ShowFooter"
            Menus="@Menus" OnClickMenu=@OnClickMenu
            UseTabSet="@UseTabSet"
            TabItemTextDictionary="@TabItemTextDictionary"
            AdditionalAssemblies="@_routerOptions.Value.AdditionalAssemblies"
            class="@Theme">
        <Header>
            <div class="container-fluid">
                <nav class="navbar navbar-expand navbar-dark flex-column justify-content-between flex-md-row bd-navbar">
                    <div>
                        <Breadcrumb Value=@Breadcrumbs></Breadcrumb>
                    </div>
                    <div>
                        <ul class="navbar-nav ml-md-auto">
                            @foreach (var render in LeftToolbarItemRenders)
                            {
                                @render
                            }
                        </ul>
                        <ul class="navbar-nav ml-md-auto" style="align-items: center;">
                            @foreach (var render in RightToolbarItemRenders)
                            {
                                @render
                            }
                            <li class="nav-item">
                                <div class="layout-drawer" @onclick="DrawerSwitch">
                                    <i class="fa fa-gears"></i>
                                </div>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        </Header>
        <Side>
            <div class="layout-banner">
                @if (!string.IsNullOrEmpty(_brandingProvider.LogoUrl))
                {
                    <img class="layout-logo" src="@_brandingProvider.LogoUrl" />
                }
                <div class="layout-title">
                    <span>@_brandingProvider.AppName?.Split("|").FirstOrDefault()</span>
                </div>
            </div>
            <div class="layout-user">
                @*<img class="layout-avatar" src="_content/BootstrapBlazorApp.Shared/images/Argo-C.png">*@
                <div class="layout-title">
                    <span>@_user.Name</span>
                </div>
                <div class="layout-user-state"></div>
            </div>
        </Side>
        <Main>
            <CascadingValue Value="this" IsFixed="true">
                @Body
            </CascadingValue>
        </Main>
        <Footer>
            <div class="text-center flex-fill">
                <a class="link-info" href="https://gitee.com/LongbowEnterprise/BootstrapAdmin" target="_blank">@this._brandingProvider.AppName</a>
            </div>
        </Footer>
    </Layout>
</CascadingValue>
@code {
    private bool UseTabSet { get; set; } = true;

    private string Theme { get; set; } = "";

    private bool IsOpen { get; set; }

    private bool IsFixedHeader { get; set; } = true;

    private bool IsFixedFooter { get; set; } = true;

    private bool IsFullSide { get; set; } = true;

    private bool ShowFooter { get; set; } = true;
    private Dictionary<string, string> TabItemTextDictionary { get; set; } = new();
    private List<MenuItem> Menus { get; set; } = new();
    private List<BreadcrumbItem> Breadcrumbs { get; set; } = new();
    private List<RenderFragment> RightToolbarItemRenders { get; set; } = new();
    private List<RenderFragment> LeftToolbarItemRenders { get; set; } = new();
    BreadcrumbItem Index;

    /// <summary>
    /// OnInitialized 方法
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Index = new BreadcrumbItem(UiLocalizer["Index"], "/");
        _navigationManager.LocationChanged += LocationChanged;
        var mainMenu = await _menuManager.GetMainMenuAsync();
        Menus = GetIconSideMenuItems(mainMenu.Items);
        Breadcrumbs = new List<BreadcrumbItem>
            {
              Index
            };
        await CreateToobar(LeftToolbarItemRenders, StandardToolbars.Left);
        await CreateToobar(RightToolbarItemRenders, StandardToolbars.Right);
    }
    void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        //var url = args.Location;
        //var menu = Menus.FirstOrDefault(x => x.Url != null && url.Contains(x.Url));

        System.Console.WriteLine(args?.Location);
    }
    Task OnClickMenu(MenuItem menu)
    {
        if (menu.Parent == null)
        {
            this.Breadcrumbs.Clear();
            this.Breadcrumbs.Add(Index);
        }
        else
        {
            var bc = GetBreadcrumbs(menu);
            bc.Reverse();
            bc.Insert(0, Index);
            this.Breadcrumbs = bc;
        }

        return Task.CompletedTask;
    }
    BreadcrumbItem GetBreadcrumb(MenuItem menu)
    {
        return new BreadcrumbItem(menu.Text ?? "", menu.Url);
    }
    List<BreadcrumbItem> GetBreadcrumbs(MenuItem menu)
    {
        List<BreadcrumbItem> data = new List<BreadcrumbItem>();
        data.Add(GetBreadcrumb(menu));
        if (menu.Parent != null)
        {
            data.AddRange(GetBreadcrumbs(menu.Parent));
        }
        return data;
    }

    private Task DrawerSwitch()
    {
        return Task.CompletedTask;
    }
    async Task CreateToobar(List<RenderFragment> renders, string name)
    {
        var toolbar = await this._toolbarManager.GetAsync(name);
        renders.Clear();
        var sequence = 0;
        foreach (var item in toolbar.Items)
        {
            renders.Add(builder =>
           {
               builder.OpenComponent(sequence++, item.ComponentType);
               builder.CloseComponent();
           });
        }
    }
    private static List<MenuItem> GetIconSideMenuItems(ApplicationMenuItemList items)
    {
        var menus = new List<MenuItem>();
        foreach (var item in items)
        {
            var menu = new MenuItem()
                {
                    Text = item.DisplayName,
                    Icon = item.Icon,
                    Url = item.Url,
                };
            if (menu.Url == "/")
            {
                menu.Match = NavLinkMatch.All;
            }

            menus.Add(menu);
            menu.Items = GetIconSideMenuItems(item.Items);
        }
        return menus;
    }
}