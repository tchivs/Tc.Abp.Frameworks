@page "/"
@using Volo.Abp.Users
@using  Tchivs.Abp.UI
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits AbpBlazorComponent
@attribute [Authorize()]
<div class="container">
<div class="p-5 text-center">
    <Badge Color="Color.Success" class="mb-4">
        <h5 class="m-1"> <i class="fas fa-rocket"></i> Congratulations, <strong>MyProjectName</strong> is successfully running!</h5>
    </Badge>

    <h1>Welcome to DemoApp!</h1>

    @if (CurrentUser.IsAuthenticated)
    {
        <h3>Current User</h3>
        <ul>
            <li>Id: <strong>@CurrentUser.Id</strong></li>
            <li>TenantId: <strong>@CurrentUser.TenantId</strong></li>
            <li>UserName: <strong>@CurrentUser.UserName</strong></li>
            <li>Name: <strong>@CurrentUser.Name</strong></li>
            <li>SurName: <strong>@CurrentUser.SurName</strong></li>
            <li>Email: <strong>@CurrentUser.Email</strong></li>
            <li>EmailVerified: <strong>@CurrentUser.EmailVerified</strong></li>
            <li>PhoneNumber: <strong>@CurrentUser.PhoneNumber</strong></li>
            <li>PhoneNumberVerified: <strong>@CurrentUser.PhoneNumberVerified</strong></li>
            <li>Roles: <strong>@CurrentUser.Roles.JoinAsString(", ")</strong></li>
        </ul>
    }
    
    @if (_claims != null)
    {
        <h3>Current Claims</h3>
        <ul>
            @foreach (var claim in _claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul>
    }
    @if (CurrentTenant.IsAvailable)
    {
        <h3>Current Tenant</h3>
        <ul>
            <li>Id: <strong>@CurrentTenant.Id</strong></li>
            <li>Name: <strong>@CurrentTenant.Name</strong></li>
        </ul>
    }

</div>
</div>
 
@code
{
    private IEnumerable<Claim> _claims;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is {IsAuthenticated: true })
        {
            _claims = authState.User.Claims;
        }
    }
}
