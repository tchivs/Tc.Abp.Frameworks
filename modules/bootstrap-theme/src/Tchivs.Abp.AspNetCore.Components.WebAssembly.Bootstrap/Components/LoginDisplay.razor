@using JetBrains.Annotations
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Localization
@using Volo.Abp.Users
@using Volo.Abp.MultiTenancy
@using Volo.Abp.UI.Navigation
@using global::Localization.Resources.AbpUi
@inherits BaseLoginDisplay
@inject IStringLocalizer<AbpUiResource> UiLocalizer
<AuthorizeView>
    <Authorized>
        <li class="nav-item dropdown">
            <a class="nav-item nav-link dropdown-toggle" data-toggle="dropdown" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                @CurrentUser.UserName
            </a>
            <ul class="dropdown-menu dropdown-menu-md-right" aria-labelledby="navbarDropdown">
                <li>
                    <a class="dropdown-item" href="#">@L["Help"]</a>
                </li>
                @if (Menu != null)
                {
                    @foreach (var menuItem in Menu.Items)
                    {
                        <li>
                            <a class="dropdown-item" href="@menuItem.Url?.TrimStart('~')" target="@menuItem.Target">@menuItem.DisplayName</a>
                        </li>
                    }
                }
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li>
                    <a class="dropdown-item" @onclick=this.Logout>@UiLocalizer["Logout"]</a>
                </li>
            </ul>
        </li>
    </Authorized>
    <NotAuthorized>
        <a class="nav-link" @onclick=this.Login>@UiLocalizer["Login"]</a>
    </NotAuthorized>
</AuthorizeView>
@code {

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [CanBeNull]
    protected SignOutSessionStateManager SignOutManager;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LazyGetService(ref SignOutManager);
        AuthenticationStateProvider.AuthenticationStateChanged +=
            AuthenticationStateProviderOnAuthenticationStateChanged;
    }

    private async void AuthenticationStateProviderOnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        Menu = await MenuManager.GetAsync(StandardMenus.User);
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose()
    {
        base.Dispose();
        AuthenticationStateProvider.AuthenticationStateChanged -=
            AuthenticationStateProviderOnAuthenticationStateChanged;
    }
    protected  async Task Login()
    {
        await this.NavigateToAsync("authentication/login");
    }
    protected  async Task Logout()
    {
        if (SignOutManager != null)
        {
            await SignOutManager.SetSignOutState();
            await NavigateToAsync("authentication/logout");
        }
    }

}